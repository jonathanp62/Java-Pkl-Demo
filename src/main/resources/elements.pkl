//
// (#)elements.pkl  0.2.0 02/21/2024
//
// @author   Jonathan Parker
// @version  0.2.0
// @since    0.2.0
//
// MIT License
//
// Copyright (c) 2024 Jonathan M. Parker
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

// This module contains both definition components which can be generated as Java
// classes as well as data components using the for generator. As data this module
// can be used as input (see the Main:elements() method).

module net.jmp.demo.pkl.Elements

typealias Classification = "slow"|"fast"

class Element {
  name: String
  size: DataSize
  duration: Duration
  itemNumber: Int
  classification: Classification
}

hidden baseName = "Name"

hidden baseElement: Element = new {
  name = baseName
  size = 0.kb
  duration = 0.s
  itemNumber = 0
  classification = "slow"
}

// Two different ways of creating the lists since arithmetic cannot be applied to DataSize and Duration

hidden names = List("Slow", "Medium", "Fast", "Super Fast")
hidden dataSizes = let (sizes = List(4096.kb, 2048.kb, 1024.kb, 512.kb)) List(sizes[3], sizes[2], sizes[1], sizes[0])
hidden durations = List(1.s, 2.s, 4.s, 8.s)

// Specifying the type of 'myElements' enabled the Java code to be generated as a list

myElements: Listing<Element> = new {
  for (offset in List(0, 1, 2, 3)) {
    (baseElement) {
      name = baseName + " - " + names[offset]
      size = dataSizes[offset]
      duration = durations[offset]
      itemNumber = offset + 1
      classification = if (names[offset].contains("Fast")) "fast" else "slow"
    }
  }
}
