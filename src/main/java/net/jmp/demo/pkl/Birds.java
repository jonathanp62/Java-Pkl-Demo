package net.jmp.demo.pkl;

/*
 * (#)Birds.java  0.1.0   02/17/2024
 *
 * @author    Jonathan Parker
 * @version   0.1.0
 * @since     0.1.0
 *
 * This source was generated by the Pkl Java Code Generator
 *
 * MIT License
 *
 * Copyright (c) 2024 Jonathan M. Parker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.Map;
import java.util.Objects;
import org.pkl.config.java.mapper.Named;
import org.pkl.config.java.mapper.NonNull;

public final class Birds {
  public final @NonNull Map<@NonNull String, @NonNull Bird> birds;

  public Birds(@Named("birds") @NonNull Map<@NonNull String, @NonNull Bird> birds) {
    this.birds = birds;
  }

  public Birds withBirds(@NonNull Map<@NonNull String, @NonNull Bird> birds) {
    return new Birds(birds);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (this.getClass() != obj.getClass()) return false;
    Birds other = (Birds) obj;
    if (!Objects.equals(this.birds, other.birds)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = 31 * result + Objects.hashCode(this.birds);
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder(100);
    builder.append(Birds.class.getSimpleName()).append(" {");
    appendProperty(builder, "birds", this.birds);
    builder.append("\n}");
    return builder.toString();
  }

  private static void appendProperty(StringBuilder builder, String name, Object value) {
    builder.append("\n  ").append(name).append(" = ");
    String[] lines = Objects.toString(value).split("\n");
    builder.append(lines[0]);
    for (int i = 1; i < lines.length; i++) {
      builder.append("\n  ").append(lines[i]);
    }
  }

  public static final class Bird {
    public final @NonNull String name;

    public final @NonNull Features features;

    public Bird(@Named("name") @NonNull String name,
        @Named("features") @NonNull Features features) {
      this.name = name;
      this.features = features;
    }

    public Bird withName(@NonNull String name) {
      return new Bird(name, features);
    }

    public Bird withFeatures(@NonNull Features features) {
      return new Bird(name, features);
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj) return true;
      if (obj == null) return false;
      if (this.getClass() != obj.getClass()) return false;
      Bird other = (Bird) obj;
      if (!Objects.equals(this.name, other.name)) return false;
      if (!Objects.equals(this.features, other.features)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      int result = 1;
      result = 31 * result + Objects.hashCode(this.name);
      result = 31 * result + Objects.hashCode(this.features);
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder(150);
      builder.append(Bird.class.getSimpleName()).append(" {");
      appendProperty(builder, "name", this.name);
      appendProperty(builder, "features", this.features);
      builder.append("\n}");
      return builder.toString();
    }
  }

  public static final class Features {
    public final boolean voiceMimickry;

    public final boolean flies;

    public final boolean swims;

    public Features(@Named("voiceMimickry") boolean voiceMimickry, @Named("flies") boolean flies,
        @Named("swims") boolean swims) {
      this.voiceMimickry = voiceMimickry;
      this.flies = flies;
      this.swims = swims;
    }

    public Features withVoiceMimickry(boolean voiceMimickry) {
      return new Features(voiceMimickry, flies, swims);
    }

    public Features withFlies(boolean flies) {
      return new Features(voiceMimickry, flies, swims);
    }

    public Features withSwims(boolean swims) {
      return new Features(voiceMimickry, flies, swims);
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj) return true;
      if (obj == null) return false;
      if (this.getClass() != obj.getClass()) return false;
      Features other = (Features) obj;
      if (!Objects.equals(this.voiceMimickry, other.voiceMimickry)) return false;
      if (!Objects.equals(this.flies, other.flies)) return false;
      if (!Objects.equals(this.swims, other.swims)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      int result = 1;
      result = 31 * result + Objects.hashCode(this.voiceMimickry);
      result = 31 * result + Objects.hashCode(this.flies);
      result = 31 * result + Objects.hashCode(this.swims);
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder(200);
      builder.append(Features.class.getSimpleName()).append(" {");
      appendProperty(builder, "voiceMimickry", this.voiceMimickry);
      appendProperty(builder, "flies", this.flies);
      appendProperty(builder, "swims", this.swims);
      builder.append("\n}");
      return builder.toString();
    }
  }
}
