package net.jmp.demo.pkl;

/*
 * (#)Application.java  0.1.0   02/17/2024
 *
 * @author    Jonathan Parker
 * @version   0.1.0
 * @since     0.1.0
 *
 * This source was generated by the Pkl Java Code Generator
 *
 * MIT License
 *
 * Copyright (c) 2024 Jonathan M. Parker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.Objects;
import org.pkl.config.java.mapper.Named;
import org.pkl.config.java.mapper.NonNull;

public final class Application {
  public final @NonNull String hostname;

  public final int port;

  public final @NonNull Environment environment;

  public final @NonNull Database database;

  public Application(@Named("hostname") @NonNull String hostname, @Named("port") int port,
      @Named("environment") @NonNull Environment environment,
      @Named("database") @NonNull Database database) {
    this.hostname = hostname;
    this.port = port;
    this.environment = environment;
    this.database = database;
  }

  public Application withHostname(@NonNull String hostname) {
    return new Application(hostname, port, environment, database);
  }

  public Application withPort(int port) {
    return new Application(hostname, port, environment, database);
  }

  public Application withEnvironment(@NonNull Environment environment) {
    return new Application(hostname, port, environment, database);
  }

  public Application withDatabase(@NonNull Database database) {
    return new Application(hostname, port, environment, database);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (this.getClass() != obj.getClass()) return false;
    Application other = (Application) obj;
    if (!Objects.equals(this.hostname, other.hostname)) return false;
    if (!Objects.equals(this.port, other.port)) return false;
    if (!Objects.equals(this.environment, other.environment)) return false;
    if (!Objects.equals(this.database, other.database)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = 31 * result + Objects.hashCode(this.hostname);
    result = 31 * result + Objects.hashCode(this.port);
    result = 31 * result + Objects.hashCode(this.environment);
    result = 31 * result + Objects.hashCode(this.database);
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder(250);
    builder.append(Application.class.getSimpleName()).append(" {");
    appendProperty(builder, "hostname", this.hostname);
    appendProperty(builder, "port", this.port);
    appendProperty(builder, "environment", this.environment);
    appendProperty(builder, "database", this.database);
    builder.append("\n}");
    return builder.toString();
  }

  private static void appendProperty(StringBuilder builder, String name, Object value) {
    builder.append("\n  ").append(name).append(" = ");
    String[] lines = Objects.toString(value).split("\n");
    builder.append(lines[0]);
    for (int i = 1; i < lines.length; i++) {
      builder.append("\n  ").append(lines[i]);
    }
  }

  public static final class Database {
    public final @NonNull String username;

    public final @NonNull String password;

    public final @NonNull String host;

    public final int port;

    public final @NonNull String dbName;

    public Database(@Named("username") @NonNull String username,
        @Named("password") @NonNull String password, @Named("host") @NonNull String host,
        @Named("port") int port, @Named("dbName") @NonNull String dbName) {
      this.username = username;
      this.password = password;
      this.host = host;
      this.port = port;
      this.dbName = dbName;
    }

    public Database withUsername(@NonNull String username) {
      return new Database(username, password, host, port, dbName);
    }

    public Database withPassword(@NonNull String password) {
      return new Database(username, password, host, port, dbName);
    }

    public Database withHost(@NonNull String host) {
      return new Database(username, password, host, port, dbName);
    }

    public Database withPort(int port) {
      return new Database(username, password, host, port, dbName);
    }

    public Database withDbName(@NonNull String dbName) {
      return new Database(username, password, host, port, dbName);
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj) return true;
      if (obj == null) return false;
      if (this.getClass() != obj.getClass()) return false;
      Database other = (Database) obj;
      if (!Objects.equals(this.username, other.username)) return false;
      if (!Objects.equals(this.password, other.password)) return false;
      if (!Objects.equals(this.host, other.host)) return false;
      if (!Objects.equals(this.port, other.port)) return false;
      if (!Objects.equals(this.dbName, other.dbName)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      int result = 1;
      result = 31 * result + Objects.hashCode(this.username);
      result = 31 * result + Objects.hashCode(this.password);
      result = 31 * result + Objects.hashCode(this.host);
      result = 31 * result + Objects.hashCode(this.port);
      result = 31 * result + Objects.hashCode(this.dbName);
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder(300);
      builder.append(Database.class.getSimpleName()).append(" {");
      appendProperty(builder, "username", this.username);
      appendProperty(builder, "password", this.password);
      appendProperty(builder, "host", this.host);
      appendProperty(builder, "port", this.port);
      appendProperty(builder, "dbName", this.dbName);
      builder.append("\n}");
      return builder.toString();
    }
  }

  public enum Environment {
    DEV("dev"),

    QA("qa"),

    PROD("prod");

    private String value;

    private Environment(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return this.value;
    }
  }
}
