package net.jmp.demo.pkl;

/*
 * (#)Elements.java 0.2.0   02/21/2024
 *
 * @author    Jonathan Parker
 * @version   0.2.0
 * @since     0.2.0
 *
 * This source was generated by the Pkl Java Code Generator
 *
 * MIT License
 *
 * Copyright (c) 2024 Jonathan M. Parker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import java.util.Objects;
import org.pkl.config.java.mapper.Named;
import org.pkl.config.java.mapper.NonNull;
import org.pkl.core.DataSize;
import org.pkl.core.Duration;

public final class Elements {
  public final @NonNull List<@NonNull Element> myElements;

  public Elements(@Named("myElements") @NonNull List<@NonNull Element> myElements) {
    this.myElements = myElements;
  }

  public Elements withMyElements(@NonNull List<@NonNull Element> myElements) {
    return new Elements(myElements);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (this.getClass() != obj.getClass()) return false;
    Elements other = (Elements) obj;
    if (!Objects.equals(this.myElements, other.myElements)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = 31 * result + Objects.hashCode(this.myElements);
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder(100);
    builder.append(Elements.class.getSimpleName()).append(" {");
    appendProperty(builder, "myElements", this.myElements);
    builder.append("\n}");
    return builder.toString();
  }

  private static void appendProperty(StringBuilder builder, String name, Object value) {
    builder.append("\n  ").append(name).append(" = ");
    String[] lines = Objects.toString(value).split("\n");
    builder.append(lines[0]);
    for (int i = 1; i < lines.length; i++) {
      builder.append("\n  ").append(lines[i]);
    }
  }

  public static final class Element {
    public final @NonNull String name;

    public final @NonNull DataSize size;

    public final @NonNull Duration duration;

    public final long itemNumber;

    public final @NonNull Classification classification;

    public Element(@Named("name") @NonNull String name, @Named("size") @NonNull DataSize size,
        @Named("duration") @NonNull Duration duration, @Named("itemNumber") long itemNumber,
        @Named("classification") @NonNull Classification classification) {
      this.name = name;
      this.size = size;
      this.duration = duration;
      this.itemNumber = itemNumber;
      this.classification = classification;
    }

    public Element withName(@NonNull String name) {
      return new Element(name, size, duration, itemNumber, classification);
    }

    public Element withSize(@NonNull DataSize size) {
      return new Element(name, size, duration, itemNumber, classification);
    }

    public Element withDuration(@NonNull Duration duration) {
      return new Element(name, size, duration, itemNumber, classification);
    }

    public Element withItemNumber(long itemNumber) {
      return new Element(name, size, duration, itemNumber, classification);
    }

    public Element withClassification(@NonNull Classification classification) {
      return new Element(name, size, duration, itemNumber, classification);
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj) return true;
      if (obj == null) return false;
      if (this.getClass() != obj.getClass()) return false;
      Element other = (Element) obj;
      if (!Objects.equals(this.name, other.name)) return false;
      if (!Objects.equals(this.size, other.size)) return false;
      if (!Objects.equals(this.duration, other.duration)) return false;
      if (!Objects.equals(this.itemNumber, other.itemNumber)) return false;
      if (!Objects.equals(this.classification, other.classification)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      int result = 1;
      result = 31 * result + Objects.hashCode(this.name);
      result = 31 * result + Objects.hashCode(this.size);
      result = 31 * result + Objects.hashCode(this.duration);
      result = 31 * result + Objects.hashCode(this.itemNumber);
      result = 31 * result + Objects.hashCode(this.classification);
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder(300);
      builder.append(Element.class.getSimpleName()).append(" {");
      appendProperty(builder, "name", this.name);
      appendProperty(builder, "size", this.size);
      appendProperty(builder, "duration", this.duration);
      appendProperty(builder, "itemNumber", this.itemNumber);
      appendProperty(builder, "classification", this.classification);
      builder.append("\n}");
      return builder.toString();
    }
  }

  public enum Classification {
    SLOW("slow"),

    FAST("fast");

    private String value;

    private Classification(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return this.value;
    }
  }
}
